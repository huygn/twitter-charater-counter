{"version":3,"sources":["ui/progress-ring/ProgressRing.module.scss","ui/progress-ring/ProgressRing.jsx","ui/progress-ring/index.js","components/twitter-input/components/counter/index.js","components/twitter-input/components/counter/Counter.jsx","ui/button/index.js","ui/button/Button.jsx","components/twitter-input/TwitterInput.jsx","components/twitter-input/index.js","components/app/App.js","components/app/index.js","serviceWorker.js","index.js","components/twitter-input/TwitterInput.module.scss","ui/button/Button.module.scss","components/app/App.module.scss"],"names":["module","exports","calculateStyle","status","colorStyle","styles","warning","danger","ProgressRing","React","memo","progress","content","strokeDashoffset","className","cx","wrapper","viewBox","circularChart","circleBg","d","circle","strokeDasharray","x","y","Counter","maxCount","count","percentage","Button","onClick","name","root","MAX_COUNT","TwitterInput","editorRef","useRef","compositeDecorator","CompositeDecorator","strategy","contentBlock","callback","contentState","length","getText","component","props","overTyped","data-offset-key","offsetKey","children","useState","EditorState","createEmpty","editorState","setEditorState","value","state","setState","tweetBtnClickHandler","useCallback","alert","useEffect","current","focus","ref","onChange","currentEditorState","rawValue","getCurrentContent","getPlainText","placeholder","handler","button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f8f3ba1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProgressRing_wrapper__2R7zI\",\"circularChart\":\"ProgressRing_circularChart__1edKf\",\"warning\":\"ProgressRing_warning__3ONNB\",\"danger\":\"ProgressRing_danger__a-WEE\",\"circleBg\":\"ProgressRing_circleBg__2thw7\",\"circle\":\"ProgressRing_circle__2vCpP\",\"content\":\"ProgressRing_content__1UOeJ\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport styles from \"./ProgressRing.module.scss\";\n\nexport const calculateStyle = status => {\n  let colorStyle = \"\";\n\n  if (status === \"warning\") colorStyle = styles.warning;\n  if (status === \"danger\") colorStyle = styles.danger;\n\n  return colorStyle;\n};\n\nconst ProgressRing = ({ progress, content, status }) => {\n  const strokeDashoffset = [progress * 100, \"100\"];\n\n  return (\n    <div className={cx(styles.wrapper, calculateStyle(status))}>\n      <svg\n        viewBox=\"0 0 36 36\"\n        className={cx(styles.circularChart, calculateStyle(status))}\n      >\n        <path\n          className={styles.circleBg}\n          d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n        />\n        <path\n          className={styles.circle}\n          strokeDasharray={strokeDashoffset}\n          d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n        />\n        <text x=\"18\" y=\"24\" className={styles.content}>\n          {content}\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nProgressRing.propTypes = {\n  progress: PropTypes.number,\n  content: PropTypes.number,\n  status: PropTypes.oneOf([\"\", \"warning\", \"danger\"])\n};\n\nexport default React.memo(ProgressRing);\n","import ProgressRing from \"./ProgressRing\";\n\nexport default ProgressRing;\n","import Counter from \"./Counter\";\n\nexport default Counter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressRing from \"../../../../ui/progress-ring\";\n\nconst Counter = ({ maxCount, count }) => {\n  const percentage = count / maxCount;\n\n  let status = \"\";\n  let content;\n  if (percentage > 0.8 && percentage < 1) {\n    status = \"warning\";\n    content = maxCount - count;\n  }\n  if (percentage >= 1) {\n    status = \"danger\";\n    content = count - maxCount;\n  }\n\n  return (\n    <ProgressRing content={content} progress={percentage} status={status} />\n  );\n};\n\nCounter.propTypes = {\n  maxCount: PropTypes.number,\n  count: PropTypes.number\n};\n\nexport default React.memo(Counter);\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport styles from \"./Button.module.scss\";\n\nconst Button = ({ onClick, name, className }) => (\n  <button className={cx(styles.root, className)} onClick={onClick}>\n    {name}\n  </button>\n);\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  name: PropTypes.string,\n  className: PropTypes.string\n};\n\nexport default React.memo(Button);\n","import React from \"react\";\nimport { Editor, EditorState, CompositeDecorator } from \"draft-js\";\nimport Counter from \"./components/counter\";\nimport Button from \"../../ui/button\";\n\nimport \"draft-js/dist/Draft.css\";\nimport styles from \"./TwitterInput.module.scss\";\n\nconst MAX_COUNT = 50;\n\nfunction TwitterInput() {\n  const editorRef = React.useRef(null);\n\n  const compositeDecorator = new CompositeDecorator([\n    {\n      strategy: overTypedStrategy,\n      component: OverTypedSpan\n    }\n  ]);\n\n  const [editorState, setEditorState] = React.useState(\n    EditorState.createEmpty(compositeDecorator)\n  );\n  const [state, setState] = React.useState({ count: 0, value: \"\" });\n\n  const onEditorChangeHandler = currentEditorState => {\n    const rawValue = currentEditorState.getCurrentContent().getPlainText();\n\n    setEditorState(currentEditorState);\n    setState({ count: rawValue.length, value: rawValue });\n  };\n\n  const tweetBtnClickHandler = React.useCallback(() => alert(state.value), [\n    state.value\n  ]);\n\n  React.useEffect(() => editorRef.current.focus(), []);\n\n  function overTypedStrategy(contentBlock, callback, contentState) {\n    const length = contentBlock.getText().length;\n\n    if (length >= MAX_COUNT) {\n      callback(MAX_COUNT, length);\n    }\n  }\n\n  function OverTypedSpan(props) {\n    return (\n      <span className={styles.overTyped} data-offset-key={props.offsetKey}>\n        {props.children}\n      </span>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <Editor\n        ref={editorRef}\n        editorState={editorState}\n        onChange={onEditorChangeHandler}\n        placeholder=\"What's happening?\"\n      />\n\n      <div className={styles.handler}>\n        <Counter maxCount={MAX_COUNT} count={state.count} />\n        <Button\n          className={styles.button}\n          onClick={tweetBtnClickHandler}\n          name=\"Tweet\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TwitterInput;\n","import TwitterInput from \"./TwitterInput\";\n\nexport default TwitterInput;\n","import React from \"react\";\nimport TwitterInput from \"../twitter-input\";\nimport styles from \"./App.module.scss\";\n\nfunction App() {\n  return (\n    <div className={styles.root}>\n      <TwitterInput />\n    </div>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"es6-shim\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/app\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TwitterInput_root__24Dxx\",\"handler\":\"TwitterInput_handler__axKT8\",\"button\":\"TwitterInput_button__3-kFR\",\"overTyped\":\"TwitterInput_overTyped__2082W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Button_root__3I8zJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1FNU7\"};"],"sourceRoot":""}