{"version":3,"sources":["ui/progress-ring/ProgressRing.module.scss","components/twitter-input/components/text-area/TextArea.jsx","components/twitter-input/components/text-area/index.js","ui/progress-ring/index.js","ui/progress-ring/ProgressRing.jsx","components/twitter-input/components/counter/Counter.jsx","components/twitter-input/components/counter/index.js","components/twitter-input/TwitterInput.jsx","components/twitter-input/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextArea","onChange","id","rows","cols","placeholder","event","count","target","value","length","ProgressRing","progress","content","status","colorStyle","styles","warning","danger","viewBox","className","cx","circularChart","circleBg","d","circle","strokeDasharray","x","y","percentage","Counter","maxCount","console","log","MAX_COUNT","DEBOUNCE_TIME","debounceOptions","maxWait","TwitterInput","useState","state","setState","useDebouncedCallback","setStatetWithDebounced","onClick","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,cAAgB,oCAAoC,QAAU,8BAA8B,OAAS,6BAA6B,SAAW,+BAA+B,OAAS,6BAA6B,WAAa,mC,0JCyBlOC,ICxBAA,EDCf,YAAiC,IAAbC,EAAY,EAAZA,SAOlB,OACE,yBAAKC,GAAG,YACN,8BACEC,KAAK,KACLC,KAAK,MACLC,YAAY,oBACZJ,SAZkB,SAAAK,GAAK,OAC3BL,EAAS,CACPM,MAAOD,EAAME,OAAOC,MAAMC,OAC1BD,MAAOH,EAAME,OAAOC,a,gCELXE,ECGM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACrCC,EAAa,GAIjB,MAHe,YAAXD,IAAsBC,EAAaC,IAAOC,SAC/B,WAAXH,IAAqBC,EAAaC,IAAOE,QAG3C,yBAAKhB,GAAG,gBACN,yBAAKiB,QAAQ,YAAYC,UAAWC,IAAGL,IAAOM,cAAeP,IAC3D,0BACEK,UAAWJ,IAAOO,SAClBC,EAAE,kFAIJ,0BACEJ,UAAWJ,IAAOS,OAClBC,gBAAiB,CAAY,IAAXd,EAAgB,OAClCY,EAAE,kFAIJ,0BAAMG,EAAE,KAAKC,EAAE,QAAQR,UAAWJ,IAAOa,YACtChB,MCKIiB,IC9BAA,EDEf,YAAuC,IAIjCjB,EAJakB,EAAmB,EAAnBA,SAAUxB,EAAS,EAATA,MACrBsB,EAAatB,EAAQwB,EAEvBjB,EAAS,GAab,OAXIe,EAAa,IAAOA,EAAa,IACnCf,EAAS,UACTD,EAAUkB,EAAWxB,GAEnBsB,EAAa,IACff,EAAS,SACTD,EAAUN,EAAQwB,GAGpBC,QAAQC,IAAIpB,EAASgB,EAAYf,GAG/B,yBAAKZ,GAAG,WACN,kBAAC,EAAD,CAAcW,QAASA,EAASD,SAAUiB,EAAYf,OAAQA,MEjB9DoB,EAAY,GACZC,EAAgB,GAEhBC,EAAkB,CAAEC,QAAS,KA2BpBC,ICjCAA,EDQf,WAAyB,IAAD,EACIC,mBAAS,CACjChC,MAAO,EACPE,MAAO,KAHa,mBACf+B,EADe,KACRC,EADQ,OAMWC,aAC/B,gBAAGnC,EAAH,EAAGA,MAAOE,EAAV,EAAUA,MAAV,OAAsBgC,EAAS,CAAElC,QAAOE,YACxC0B,EACAC,GAHKO,EANe,oBActB,OACE,yBAAKzC,GAAG,gBACN,kBAAC,EAAD,CAAUD,SAAU0C,IACpB,kBAAC,EAAD,CAASZ,SAAUG,EAAW3B,MAAOiC,EAAMjC,QAC3C,4BAAQqC,QANS,kBAAMC,MAAML,EAAM/B,SAMnC,WEhBSqC,MATf,WACE,OACE,oCACE,oDACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed1fa858.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circularChart\":\"ProgressRing_circularChart__1edKf\",\"warning\":\"ProgressRing_warning__3ONNB\",\"danger\":\"ProgressRing_danger__a-WEE\",\"circleBg\":\"ProgressRing_circleBg__2thw7\",\"circle\":\"ProgressRing_circle__2vCpP\",\"percentage\":\"ProgressRing_percentage__IHVLO\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction TextArea({ onChange }) {\n  const onChangeHandler = event =>\n    onChange({\n      count: event.target.value.length,\n      value: event.target.value\n    });\n\n  return (\n    <div id=\"textArea\">\n      <textarea\n        rows=\"15\"\n        cols=\"150\"\n        placeholder=\"What's happening?\"\n        onChange={onChangeHandler}\n      ></textarea>\n    </div>\n  );\n}\n\nTextArea.propTypes = {\n  onChange: PropTypes.func\n};\n\nexport default TextArea;\n","import TextArea from \"./TextArea\";\n\nexport default TextArea;\n","import ProgressRing from \"./ProgressRing\";\n\nexport default ProgressRing;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport styles from \"./ProgressRing.module.scss\";\n\nconst ProgressRing = ({ progress, content, status }) => {\n  let colorStyle = \"\";\n  if (status === \"warning\") colorStyle = styles.warning;\n  if (status === \"danger\") colorStyle = styles.danger;\n\n  return (\n    <div id=\"progressRing\">\n      <svg viewBox=\"0 0 36 36\" className={cx(styles.circularChart, colorStyle)}>\n        <path\n          className={styles.circleBg}\n          d=\"M18 2.0845\n  a 15.9155 15.9155 0 0 1 0 31.831\n  a 15.9155 15.9155 0 0 1 0 -31.831\"\n        />\n        <path\n          className={styles.circle}\n          strokeDasharray={[progress * 100, \"100\"]}\n          d=\"M18 2.0845\n    a 15.9155 15.9155 0 0 1 0 31.831\n    a 15.9155 15.9155 0 0 1 0 -31.831\"\n        />\n        <text x=\"18\" y=\"20.35\" className={styles.percentage}>\n          {content}\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nProgressRing.propTypes = {\n  progress: PropTypes.number,\n  content: PropTypes.number,\n  status: PropTypes.oneOf([\"\", \"warning\", \"danger\"])\n};\n\nexport default ProgressRing;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressRing from \"../../../../ui/progress-ring\";\n\nfunction Counter({ maxCount, count }) {\n  const percentage = count / maxCount;\n\n  let status = \"\";\n  let content;\n  if (percentage > 0.8 && percentage < 1) {\n    status = \"warning\";\n    content = maxCount - count;\n  }\n  if (percentage > 1) {\n    status = \"danger\";\n    content = count - maxCount;\n  }\n\n  console.log(content, percentage, status);\n\n  return (\n    <div id=\"counter\">\n      <ProgressRing content={content} progress={percentage} status={status} />\n    </div>\n  );\n}\n\nCounter.propTypes = {\n  maxCount: PropTypes.number,\n  count: PropTypes.number\n};\n\nexport default Counter;\n","import Counter from \"./Counter\";\n\nexport default Counter;\n","import React, { useState } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport TextArea from \"./components/text-area\";\nimport Counter from \"./components/counter\";\n\nconst MAX_COUNT = 50;\nconst DEBOUNCE_TIME = 50;\n\nconst debounceOptions = { maxWait: 1000 };\n\nfunction TwitterInput() {\n  const [state, setState] = useState({\n    count: 0,\n    value: \"\"\n  });\n\n  const [setStatetWithDebounced] = useDebouncedCallback(\n    ({ count, value }) => setState({ count, value }),\n    DEBOUNCE_TIME,\n    debounceOptions\n  );\n\n  const tweetHandler = () => alert(state.value);\n\n  return (\n    <div id=\"twitterInput\">\n      <TextArea onChange={setStatetWithDebounced} />\n      <Counter maxCount={MAX_COUNT} count={state.count} />\n      <button onClick={tweetHandler}>Tweet</button>\n    </div>\n  );\n}\n\nTwitterInput.propTypes = {};\n\nexport default TwitterInput;\n","import TwitterInput from \"./TwitterInput\";\n\nexport default TwitterInput;\n","import React from \"react\";\nimport TwitterInput from \"./components/twitter-input\";\n\nfunction App() {\n  return (\n    <>\n      <h3>Twitter Input Sample</h3>\n      <TwitterInput />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}